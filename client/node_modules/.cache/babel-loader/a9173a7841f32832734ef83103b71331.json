{"ast":null,"code":"'use strict';\n\nconst color = require('color');\n\nconst is = require('./is');\n\nconst sharp = require('./sharp');\n/**\n * Extract input options, if any, from an object.\n * @private\n */\n\n\nfunction _inputOptionsFromObject(obj) {\n  const {\n    raw,\n    density,\n    limitInputPixels,\n    unlimited,\n    sequentialRead,\n    failOn,\n    failOnError,\n    animated,\n    page,\n    pages,\n    subifd\n  } = obj;\n  return [raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd].some(is.defined) ? {\n    raw,\n    density,\n    limitInputPixels,\n    unlimited,\n    sequentialRead,\n    failOn,\n    failOnError,\n    animated,\n    page,\n    pages,\n    subifd\n  } : undefined;\n}\n/**\n * Create Object containing input and input-related options.\n * @private\n */\n\n\nfunction _createInputDescriptor(input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOn: 'warning',\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    unlimited: false,\n    sequentialRead: false\n  };\n\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    if (input.length === 0) {\n      throw Error('Input Buffer is empty');\n    }\n\n    inputDescriptor.buffer = input;\n  } else if (is.typedArray(input)) {\n    if (input.length === 0) {\n      throw Error('Input Bit Array is empty');\n    }\n\n    inputDescriptor.buffer = Buffer.from(input.buffer, input.byteOffset, input.byteLength);\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''}`);\n  }\n\n  if (is.object(inputOptions)) {\n    // Deprecated: failOnError\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOn = inputOptions.failOnError ? 'warning' : 'none';\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    } // failOn\n\n\n    if (is.defined(inputOptions.failOn)) {\n      if (is.string(inputOptions.failOn) && is.inArray(inputOptions.failOn, ['none', 'truncated', 'error', 'warning'])) {\n        inputDescriptor.failOn = inputOptions.failOn;\n      } else {\n        throw is.invalidParameterError('failOn', 'one of: none, truncated, error, warning', inputOptions.failOn);\n      }\n    } // Density\n\n\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    } // limitInputPixels\n\n\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels ? Math.pow(0x3FFF, 2) : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && is.inRange(inputOptions.limitInputPixels, 0, Number.MAX_SAFE_INTEGER)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'positive integer', inputOptions.limitInputPixels);\n      }\n    } // unlimited\n\n\n    if (is.defined(inputOptions.unlimited)) {\n      if (is.bool(inputOptions.unlimited)) {\n        inputDescriptor.unlimited = inputOptions.unlimited;\n      } else {\n        throw is.invalidParameterError('unlimited', 'boolean', inputOptions.unlimited);\n      }\n    } // sequentialRead\n\n\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    } // Raw pixel input\n\n\n    if (is.defined(inputOptions.raw)) {\n      if (is.object(inputOptions.raw) && is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 && is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 && is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n        inputDescriptor.rawPremultiplied = !!inputOptions.raw.premultiplied;\n\n        switch (input.constructor) {\n          case Uint8Array:\n          case Uint8ClampedArray:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n\n          case Int8Array:\n            inputDescriptor.rawDepth = 'char';\n            break;\n\n          case Uint16Array:\n            inputDescriptor.rawDepth = 'ushort';\n            break;\n\n          case Int16Array:\n            inputDescriptor.rawDepth = 'short';\n            break;\n\n          case Uint32Array:\n            inputDescriptor.rawDepth = 'uint';\n            break;\n\n          case Int32Array:\n            inputDescriptor.rawDepth = 'int';\n            break;\n\n          case Float32Array:\n            inputDescriptor.rawDepth = 'float';\n            break;\n\n          case Float64Array:\n            inputDescriptor.rawDepth = 'double';\n            break;\n\n          default:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n        }\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    } // Multi-page input (GIF, TIFF, PDF)\n\n\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    } // Multi-level input (OpenSlide)\n\n\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    } // Sub Image File Directory (TIFF)\n\n\n    if (is.defined(inputOptions.subifd)) {\n      if (is.integer(inputOptions.subifd) && is.inRange(inputOptions.subifd, -1, 100000)) {\n        inputDescriptor.subifd = inputOptions.subifd;\n      } else {\n        throw is.invalidParameterError('subifd', 'integer between -1 and 100000', inputOptions.subifd);\n      }\n    } // Create new image\n\n\n    if (is.defined(inputOptions.create)) {\n      if (is.object(inputOptions.create) && is.integer(inputOptions.create.width) && inputOptions.create.width > 0 && is.integer(inputOptions.create.height) && inputOptions.create.height > 0 && is.integer(inputOptions.create.channels)) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels; // Noise\n\n        if (is.defined(inputOptions.create.noise)) {\n          if (!is.object(inputOptions.create.noise)) {\n            throw new Error('Expected noise to be an object');\n          }\n\n          if (!is.inArray(inputOptions.create.noise.type, ['gaussian'])) {\n            throw new Error('Only gaussian noise is supported at the moment');\n          }\n\n          if (!is.inRange(inputOptions.create.channels, 1, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 1 and 4', inputOptions.create.channels);\n          }\n\n          inputDescriptor.createNoiseType = inputOptions.create.noise.type;\n\n          if (is.number(inputOptions.create.noise.mean) && is.inRange(inputOptions.create.noise.mean, 0, 10000)) {\n            inputDescriptor.createNoiseMean = inputOptions.create.noise.mean;\n          } else {\n            throw is.invalidParameterError('create.noise.mean', 'number between 0 and 10000', inputOptions.create.noise.mean);\n          }\n\n          if (is.number(inputOptions.create.noise.sigma) && is.inRange(inputOptions.create.noise.sigma, 0, 10000)) {\n            inputDescriptor.createNoiseSigma = inputOptions.create.noise.sigma;\n          } else {\n            throw is.invalidParameterError('create.noise.sigma', 'number between 0 and 10000', inputOptions.create.noise.sigma);\n          }\n        } else if (is.defined(inputOptions.create.background)) {\n          if (!is.inRange(inputOptions.create.channels, 3, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 3 and 4', inputOptions.create.channels);\n          }\n\n          const background = color(inputOptions.create.background);\n          inputDescriptor.createBackground = [background.red(), background.green(), background.blue(), Math.round(background.alpha() * 255)];\n        } else {\n          throw new Error('Expected valid noise or background to create a new input image');\n        }\n\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected valid width, height and channels to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n\n  return inputDescriptor;\n}\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\n\n\nfunction _flattenBufferIn() {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\n\n\nfunction _isStreamInput() {\n  return Array.isArray(this.options.input.buffer);\n}\n/**\n * Fast access to (uncached) image metadata without decoding any compressed pixel data.\n *\n * This is taken from the header of the input image.\n * It does not include operations, such as resize, to be applied to the output image.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration, see example below)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration, see example below)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://www.libvips.org/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://www.libvips.org/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `subifds`: Number of Sub Image File Directories in an OME-TIFF image\n * - `background`: Default background colour, if present, for PNG (bKGD) and GIF images, either an RGB Object or a single greyscale value\n * - `compression`: The encoder used to compress an HEIF file, `av1` (AVIF) or `hevc` (HEIC)\n * - `resolutionUnit`: The unit of resolution (density), either `inch` or `cm`, if present\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const metadata = await sharp(input).metadata();\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @example\n * // Based on EXIF rotation metadata, get the right-side-up width and height:\n *\n * const size = getNormalSize(await sharp(input).metadata());\n *\n * function getNormalSize({ width, height, orientation }) {\n *   return (orientation || 0) >= 5\n *     ? { width: height, height: width }\n *     : { width, height };\n * }\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\n\n\nfunction metadata(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any.\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any.\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram.\n *\n * **Note**: Statistics are derived from the original input image. Any operations performed on the image must first be\n * written to a buffer in order to run `stats` on the result (see third example).\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @example\n * const image = sharp(input);\n * // store intermediate result\n * const part = await image.extract(region).toBuffer();\n * // create new instance to obtain statistics of extracted region\n * const stats = await sharp(part).stats();\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\n\n\nfunction stats(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};","map":{"version":3,"sources":["D:/Marcos Muni/Proyecto Muni/Gitinspecobras/inspecobras/client/node_modules/sharp/lib/input.js"],"names":["color","require","is","sharp","_inputOptionsFromObject","obj","raw","density","limitInputPixels","unlimited","sequentialRead","failOn","failOnError","animated","page","pages","subifd","some","defined","undefined","_createInputDescriptor","input","inputOptions","containerOptions","inputDescriptor","Math","pow","string","file","buffer","length","Error","typedArray","Buffer","from","byteOffset","byteLength","plainObject","object","allowStream","bool","invalidParameterError","inArray","inRange","integer","Number","MAX_SAFE_INTEGER","width","height","channels","rawWidth","rawHeight","rawChannels","rawPremultiplied","premultiplied","constructor","Uint8Array","Uint8ClampedArray","rawDepth","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","level","create","createWidth","createHeight","createChannels","noise","type","createNoiseType","number","mean","createNoiseMean","sigma","createNoiseSigma","background","createBackground","red","green","blue","round","alpha","_write","chunk","encoding","callback","Array","isArray","options","on","streamInFinished","push","_flattenBufferIn","_isStreamInput","concat","metadata","fn","Promise","resolve","reject","err","stats","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\nconst sharp = require('./sharp');\n\n/**\n * Extract input options, if any, from an object.\n * @private\n */\nfunction _inputOptionsFromObject (obj) {\n  const { raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd } = obj;\n  return [raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd].some(is.defined)\n    ? { raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd }\n    : undefined;\n}\n\n/**\n * Create Object containing input and input-related options.\n * @private\n */\nfunction _createInputDescriptor (input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOn: 'warning',\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    unlimited: false,\n    sequentialRead: false\n  };\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    if (input.length === 0) {\n      throw Error('Input Buffer is empty');\n    }\n    inputDescriptor.buffer = input;\n  } else if (is.typedArray(input)) {\n    if (input.length === 0) {\n      throw Error('Input Bit Array is empty');\n    }\n    inputDescriptor.buffer = Buffer.from(input.buffer, input.byteOffset, input.byteLength);\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${\n      is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''\n    }`);\n  }\n  if (is.object(inputOptions)) {\n    // Deprecated: failOnError\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOn = inputOptions.failOnError ? 'warning' : 'none';\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    }\n    // failOn\n    if (is.defined(inputOptions.failOn)) {\n      if (is.string(inputOptions.failOn) && is.inArray(inputOptions.failOn, ['none', 'truncated', 'error', 'warning'])) {\n        inputDescriptor.failOn = inputOptions.failOn;\n      } else {\n        throw is.invalidParameterError('failOn', 'one of: none, truncated, error, warning', inputOptions.failOn);\n      }\n    }\n    // Density\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    }\n    // limitInputPixels\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels\n          ? Math.pow(0x3FFF, 2)\n          : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && is.inRange(inputOptions.limitInputPixels, 0, Number.MAX_SAFE_INTEGER)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'positive integer', inputOptions.limitInputPixels);\n      }\n    }\n    // unlimited\n    if (is.defined(inputOptions.unlimited)) {\n      if (is.bool(inputOptions.unlimited)) {\n        inputDescriptor.unlimited = inputOptions.unlimited;\n      } else {\n        throw is.invalidParameterError('unlimited', 'boolean', inputOptions.unlimited);\n      }\n    }\n    // sequentialRead\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    }\n    // Raw pixel input\n    if (is.defined(inputOptions.raw)) {\n      if (\n        is.object(inputOptions.raw) &&\n        is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 &&\n        is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 &&\n        is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)\n      ) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n        inputDescriptor.rawPremultiplied = !!inputOptions.raw.premultiplied;\n\n        switch (input.constructor) {\n          case Uint8Array:\n          case Uint8ClampedArray:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n          case Int8Array:\n            inputDescriptor.rawDepth = 'char';\n            break;\n          case Uint16Array:\n            inputDescriptor.rawDepth = 'ushort';\n            break;\n          case Int16Array:\n            inputDescriptor.rawDepth = 'short';\n            break;\n          case Uint32Array:\n            inputDescriptor.rawDepth = 'uint';\n            break;\n          case Int32Array:\n            inputDescriptor.rawDepth = 'int';\n            break;\n          case Float32Array:\n            inputDescriptor.rawDepth = 'float';\n            break;\n          case Float64Array:\n            inputDescriptor.rawDepth = 'double';\n            break;\n          default:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n        }\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    }\n    // Multi-page input (GIF, TIFF, PDF)\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    }\n    // Multi-level input (OpenSlide)\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    }\n    // Sub Image File Directory (TIFF)\n    if (is.defined(inputOptions.subifd)) {\n      if (is.integer(inputOptions.subifd) && is.inRange(inputOptions.subifd, -1, 100000)) {\n        inputDescriptor.subifd = inputOptions.subifd;\n      } else {\n        throw is.invalidParameterError('subifd', 'integer between -1 and 100000', inputOptions.subifd);\n      }\n    }\n    // Create new image\n    if (is.defined(inputOptions.create)) {\n      if (\n        is.object(inputOptions.create) &&\n        is.integer(inputOptions.create.width) && inputOptions.create.width > 0 &&\n        is.integer(inputOptions.create.height) && inputOptions.create.height > 0 &&\n        is.integer(inputOptions.create.channels)\n      ) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels;\n        // Noise\n        if (is.defined(inputOptions.create.noise)) {\n          if (!is.object(inputOptions.create.noise)) {\n            throw new Error('Expected noise to be an object');\n          }\n          if (!is.inArray(inputOptions.create.noise.type, ['gaussian'])) {\n            throw new Error('Only gaussian noise is supported at the moment');\n          }\n          if (!is.inRange(inputOptions.create.channels, 1, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 1 and 4', inputOptions.create.channels);\n          }\n          inputDescriptor.createNoiseType = inputOptions.create.noise.type;\n          if (is.number(inputOptions.create.noise.mean) && is.inRange(inputOptions.create.noise.mean, 0, 10000)) {\n            inputDescriptor.createNoiseMean = inputOptions.create.noise.mean;\n          } else {\n            throw is.invalidParameterError('create.noise.mean', 'number between 0 and 10000', inputOptions.create.noise.mean);\n          }\n          if (is.number(inputOptions.create.noise.sigma) && is.inRange(inputOptions.create.noise.sigma, 0, 10000)) {\n            inputDescriptor.createNoiseSigma = inputOptions.create.noise.sigma;\n          } else {\n            throw is.invalidParameterError('create.noise.sigma', 'number between 0 and 10000', inputOptions.create.noise.sigma);\n          }\n        } else if (is.defined(inputOptions.create.background)) {\n          if (!is.inRange(inputOptions.create.channels, 3, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 3 and 4', inputOptions.create.channels);\n          }\n          const background = color(inputOptions.create.background);\n          inputDescriptor.createBackground = [\n            background.red(),\n            background.green(),\n            background.blue(),\n            Math.round(background.alpha() * 255)\n          ];\n        } else {\n          throw new Error('Expected valid noise or background to create a new input image');\n        }\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected valid width, height and channels to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n  return inputDescriptor;\n}\n\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\nfunction _write (chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\nfunction _flattenBufferIn () {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\nfunction _isStreamInput () {\n  return Array.isArray(this.options.input.buffer);\n}\n\n/**\n * Fast access to (uncached) image metadata without decoding any compressed pixel data.\n *\n * This is taken from the header of the input image.\n * It does not include operations, such as resize, to be applied to the output image.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration, see example below)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration, see example below)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://www.libvips.org/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://www.libvips.org/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `subifds`: Number of Sub Image File Directories in an OME-TIFF image\n * - `background`: Default background colour, if present, for PNG (bKGD) and GIF images, either an RGB Object or a single greyscale value\n * - `compression`: The encoder used to compress an HEIF file, `av1` (AVIF) or `hevc` (HEIC)\n * - `resolutionUnit`: The unit of resolution (density), either `inch` or `cm`, if present\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const metadata = await sharp(input).metadata();\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @example\n * // Based on EXIF rotation metadata, get the right-side-up width and height:\n *\n * const size = getNormalSize(await sharp(input).metadata());\n *\n * function getNormalSize({ width, height, orientation }) {\n *   return (orientation || 0) >= 5\n *     ? { width: height, height: width }\n *     : { width, height };\n * }\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\nfunction metadata (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any.\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any.\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram.\n *\n * **Note**: Statistics are derived from the original input image. Any operations performed on the image must first be\n * written to a buffer in order to run `stats` on the result (see third example).\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @example\n * const image = sharp(input);\n * // store intermediate result\n * const part = await image.extract(region).toBuffer();\n * // create new instance to obtain statistics of extracted region\n * const stats = await sharp(part).stats();\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\nfunction stats (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};\n"]},"metadata":{},"sourceType":"script"}